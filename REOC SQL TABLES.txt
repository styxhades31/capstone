REOC SQL TABLES

1. CREATE TABLE `users` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(255) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `date_created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `isActive` INT(1) NOT NULL DEFAULT 0,      -- integer for isActive (0 for inactive, 1 for active)
  `verification_code` CHAR(6) NULL,          -- new column for verification code
  PRIMARY KEY (`id`)
);
ALTER TABLE `users`
ADD COLUMN `temporaryemailholder` VARCHAR(255) NULL AFTER `verification_code`;
ALTER TABLE `users`
MODIFY COLUMN `isActive` INT(1) NOT NULL DEFAULT 1;



2. CREATE TABLE `roles` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`)
);

3. INSERT INTO `roles` (`name`) VALUES ('Admin'), ('Reviewer'), ('Researcher');

4.CREATE TABLE user_roles (
    user_id INT,
    role_id INT,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (role_id) REFERENCES roles(id),
    PRIMARY KEY (user_id, role_id)

);

5.CREATE TABLE `reviewer_profiles` (
    `id` INT(11) NOT NULL AUTO_INCREMENT,
    `user_id` INT(11) NOT NULL,  -- Foreign key linking to users table
    `first_name` VARCHAR(100) NOT NULL,
    `last_name` VARCHAR(100) NOT NULL,
    `middle_initial` CHAR(10) NULL,  -- Optional, to hold a single character
    PRIMARY KEY (`id`),
    FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE  -- Cascades delete if user is deleted
);
ALTER TABLE `users`
ADD COLUMN `status` ENUM('Free', 'Occupied') NOT NULL DEFAULT 'Free';

6.CREATE TABLE `researcher_files` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `user_id` INT(11) NOT NULL,  -- Foreign key linking to users table
  `file_type` VARCHAR(255) NOT NULL, -- File type (Application Form, Research Protocol, etc.)
  `filename` VARCHAR(255) NOT NULL,  -- Stored filename
  `file_path` VARCHAR(255) NOT NULL, -- File path for storage
  `uploaded_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
);
changes***
CREATE TABLE `researcher_files` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  researcher_title_id INT,                  -- Foreign key from Researcher_title_informations
  `file_type` VARCHAR(255) NOT NULL, -- File type (Application Form, Research Protocol, etc.)
  `filename` VARCHAR(255) NOT NULL,  -- Stored filename
  `file_path` VARCHAR(255) NOT NULL, -- File path for storage
  `uploaded_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  FOREIGN KEY (researcher_title_id) REFERENCES Researcher_title_informations(id) ON DELETE CASCADE
);



add new folder Faculty Member

7. CREATE TABLE Researcher_title_informations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,                              -- Foreign key from the users table
    study_protocol_title VARCHAR(255),
    college VARCHAR(100),
    research_category VARCHAR(100),
    adviser_name VARCHAR(255),
    uploaded_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  -- Added column for upload timestamp
    type_of_review VARCHAR(100) DEFAULT 'For Initial Review',
    payment VARCHAR(100) DEFAULT 'None',
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
ALTER TABLE Researcher_title_informations
ADD COLUMN type_of_review VARCHAR(100) DEFAULT 'For Initial Review',
ADD COLUMN payment VARCHAR(100) DEFAULT 'None';

CREATE TABLE ResearcherTitleInfo_NoUser (
    id INT AUTO_INCREMENT PRIMARY KEY,
    study_protocol_title VARCHAR(255),
    college VARCHAR(100),
    research_category VARCHAR(100),
    adviser_name VARCHAR(255),
    uploaded_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  -- Column for upload timestamp
    type_of_review VARCHAR(100) DEFAULT 'For Initial Review', -- Added default review type
    payment VARCHAR(100) DEFAULT 'None'                      -- Added default payment status
);
CREATE TABLE ResearcherInvolved_NoUser (
    id INT AUTO_INCREMENT PRIMARY KEY,
    researcher_title_id INT,                  -- Foreign key from ResearcherTitleInfo_NoUser
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    middle_initial VARCHAR(2),
    suffix VARCHAR(10) DEFAULT NULL,
    FOREIGN KEY (researcher_title_id) REFERENCES ResearcherTitleInfo_NoUser(id) ON DELETE CASCADE
);


-- Researcher Involved Table (for researchers and co-researchers)
8. CREATE TABLE Researcher_involved (
    id INT AUTO_INCREMENT PRIMARY KEY,
    researcher_title_id INT,                  -- Foreign key from Researcher_title_informations
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    middle_initial VARCHAR(2),
    suffix VARCHAR(10) DEFAULT NULL,
    FOREIGN KEY (researcher_title_id) REFERENCES Researcher_title_informations(id) ON DELETE CASCADE
);

CREATE TABLE `appointments` (
    `id` INT(11) NOT NULL AUTO_INCREMENT,
    `user_id` INT(11) NOT NULL,
    `appointment_date` DATE NOT NULL,  -- Renamed column to avoid space
    PRIMARY KEY (`id`),
    FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
);
changes***
CREATE TABLE `appointments` (
    `id` INT(11) NOT NULL AUTO_INCREMENT,
     researcher_title_id INT,                  -- Foreign key from Researcher_title_informations
    `appointment_date` DATE NOT NULL,  -- Renamed column to avoid space
    PRIMARY KEY (`id`),
    FOREIGN KEY (researcher_title_id) REFERENCES Researcher_title_informations(id) ON DELETE CASCADE

);

CREATE TABLE notavail_appointment (
    id INT AUTO_INCREMENT PRIMARY KEY,
    unavailable_date DATE NOT NULL,  -- Date when the admin is unavailable
    added_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP  -- Timestamp when the date was added
);

CREATE TABLE `user_unavailable_dates` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `user_id` INT(11) NOT NULL,           -- Links to the users table
  `unavailable_date` DATE NOT NULL,     -- The date when the user is unavailable
  PRIMARY KEY (`id`),
  FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
);



CREATE TABLE `researcher_profiles` (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL,
  mobile_number VARCHAR(15) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE colleges (
    id INT AUTO_INCREMENT PRIMARY KEY,
    college_name_and_color VARCHAR(255) NOT NULL
);
-- Insert colleges into the table
INSERT INTO colleges (college_name_and_color) VALUES
('College of Agriculture - Green'),
('College of Architecture - Maroon'),
('College of Asian and Islamic Studies - Violet'),
('College of Computing Studies - Maroon'),
('College of Criminal Justice Education - Black'),
('College of Engineering - Yellow'),
('College of Forestry and Environmental Studies - Green'),
('College of Home Economics - Violet'),
('College of Law - Black'),
('College of Liberal Arts - Red'),
('College of Medicine - Pink'),
('College of Nursing - Pink'),
('College of Public Administration and Development Studies - Orange'),
('College of Science and Mathematics - Orange'),
('College of Social Work and Community Development - Orange'),
('College of Sports Science and Physical Education - Red'),
('College of Teacher Education - Blue'),
('External Studies Unit - Brown'),
('Institutionally Funded Research - Brown'),
('Other Institution - Brown');

CREATE TABLE `faculty_members` (
    `id` INT(11) AUTO_INCREMENT PRIMARY KEY,
    `name` VARCHAR(255) NOT NULL,
    `picture` VARCHAR(255) DEFAULT NULL,
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE `Schedule` (
    `id` INT(11) AUTO_INCREMENT PRIMARY KEY,
    `name` VARCHAR(255) NOT NULL,
    `picture` VARCHAR(255) DEFAULT NULL,
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE `appointments`
ADD COLUMN `status` ENUM('pending', 'completed') NOT NULL DEFAULT 'pending';

NEW NEW NEW NEW NEW *************
CREATE TABLE Certificate_generated (
    id INT AUTO_INCREMENT PRIMARY KEY,                    -- Unique identifier for each certificate
    rti_id INT NOT NULL,                                  -- Foreign key linking to the RTI table
    generated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, -- Timestamp of certificate generation
    file_path VARCHAR(500) NOT NULL,                     -- Path to the generated certificate file
    file_type VARCHAR(100) NOT NULL DEFAULT 'PDF',         -- File type, default is PDF
    status ENUM('Hide', 'Show') NOT NULL DEFAULT 'Hide',  -- Status column with default value 'Hide'
    FOREIGN KEY (rti_id) REFERENCES Researcher_title_informations(id) ON DELETE CASCADE
);
CREATE TABLE Certificate_generatedNouser (
    id INT AUTO_INCREMENT PRIMARY KEY,                    -- Unique identifier for each certificate
    rti_id INT NOT NULL,                                  -- Foreign key linking to the RTI table
    generated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, -- Timestamp of certificate generation
    file_path VARCHAR(500) NOT NULL,                     -- Path to the generated certificate file
    file_type VARCHAR(100) NOT NULL DEFAULT 'PDF',         -- File type, default is PDF
    status ENUM('Hide', 'Show') NOT NULL DEFAULT 'Hide',  -- Status column with default value 'Hide'
    FOREIGN KEY (rti_id) REFERENCES researchertitleinfo_nouser(id) ON DELETE CASCADE
);
CREATE TABLE research_codes (
    id INT AUTO_INCREMENT PRIMARY KEY,        -- Unique identifier for each record
    code_acronym VARCHAR(10) NOT NULL,       -- Acronym for the research code (e.g., UG, GS, IF, EF)
    code_number INT NOT NULL                 -- Associated number for the code
);

INSERT INTO research_codes (code_acronym, code_number) VALUES
('UG', 1),
('GS', 2),
('IF', 3),
('EF', 4);

CREATE TABLE reoc_dynamic_data (
    id INT AUTO_INCREMENT PRIMARY KEY,             -- Unique identifier for each row
    certificate_version VARCHAR(255) NOT NULL,     -- REOC certificate version as a string
    date_effective VARCHAR(255) NOT NULL,           -- REOC certificate date effective as a string
let_code VARCHAR(255) NOT NULL -- Adding a new column for let_code

);
INSERT INTO reoc_dynamic_data (certificate_version, date_effective, let_code)
VALUES ('001.1', '25-Nov-2024', '006.00');

CREATE TABLE application_status (
    id INT AUTO_INCREMENT PRIMARY KEY,
    status VARCHAR(10) NOT NULL DEFAULT 'open'
);
CREATE TABLE vision_mission (
    id INT AUTO_INCREMENT PRIMARY KEY,              -- Primary Key, auto-incremented ID for each record
    statement_type ENUM('Vision', 'Mission', 'Goals') NOT NULL, -- Enum for Vision, Mission, or Goals
    content TEXT NOT NULL,                           -- Content of the Vision, Mission, or Goal statement
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP -- Timestamp for tracking updates
);
NEW

CREATE TABLE assign_reviewer (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    researcher_info_id INT NOT NULL,
    status ENUM('Ongoing', 'Complete') NOT NULL DEFAULT 'Ongoing' -- Status column
);
ALTER TABLE `users`
ADD COLUMN `status` ENUM('Free', 'Occupied') NOT NULL DEFAULT 'Free';

ALTER TABLE Researcher_title_informations
ADD COLUMN Revision_document VARCHAR(255) NULL,
ADD COLUMN Revised_document VARCHAR(255) NULL;
ALTER TABLE Researcher_title_informations
ADD COLUMN Revision_status ENUM('None', 'Comply') DEFAULT 'None' AFTER Revised_document;
ALTER TABLE Researcher_title_informations
ADD COLUMN Revision_Upload_button VARCHAR(5) DEFAULT 'None' AFTER `Revised_document`;
ALTER TABLE Researcher_title_informations
CHANGE COLUMN Revision_status Revision_status VARCHAR(255) DEFAULT 'None' AFTER Revised_document;

NEW
ALTER TABLE `users`
ADD COLUMN `number_of_reviews` INT NOT NULL DEFAULT 1;
CREATE TABLE Revised_Document_History (
    id INT AUTO_INCREMENT PRIMARY KEY,
    researcher_info_id INT NOT NULL, -- Links to the Researcher_title_informations table
    old_revised_document VARCHAR(255) NOT NULL, -- Stores the old file name
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- Timestamp of the revision
    FOREIGN KEY (researcher_info_id) REFERENCES Researcher_title_informations(id) -- Enforce relationship
);
NEW

ALTER TABLE Researcher_title_informations
ADD COLUMN new_date_column DATE;
ALTER TABLE Researcher_title_informations
ADD COLUMN new_date_column DATE;

ALTER TABLE reoc_dynamic_data
ADD COLUMN Signature VARCHAR(100), -- Adding the Signature column
ADD COLUMN appointment_capacity INT; -- Adding the appointment_capacity column
UPDATE reoc_dynamic_data 
SET Signature = 'Johnrei Aris B. Atendido' 
WHERE id = 1;
ALTER TABLE reoc_dynamic_data MODIFY COLUMN Signature VARCHAR(255);


